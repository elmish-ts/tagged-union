import { DeepReadonly } from 'typelevel-ts'

/** @ignore */
export const TAG: unique symbol = '@elmish-ts/tagged-union' as any

/** @ignore */
type _ = unknown

/** @ignore */
export type TupleOnly<T extends unknown[]> = any[] extends T ? never : T

/** @ignore */
export type AnyTuple =
  | []
  | [_]
  | [_, _]
  | [_, _, _]
  | [_, _, _, _]
  | [_, _, _, _, _]
  | [_, _, _, _, _, _]
  | [_, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
