/** @ignore */
export const TAG: unique symbol = '@elmish-ts/tagged-union' as any
export const BRAND: unique symbol = '__brand__' as any

/** @ignore */
export type Brand<U, T> = { [BRAND]: U } & T

/** @ignore */
export type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((
  k: infer I
) => void)
  ? I
  : never

/** @ignore */
export type NoUnion<Key> = [Key] extends [UnionToIntersection<Key>] ? Key : never

/** @ignore */
export type StringLitToSymbol<S extends string> = string extends S
  ? never
  : { readonly key: unique symbol }['key']

/** @ignore */
type _ = unknown

/** @ignore */
export type AnyTuple =
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _, _]
  | [_, _, _, _, _, _, _]
  | [_, _, _, _, _, _]
  | [_, _, _, _, _]
  | [_, _, _, _]
  | [_, _, _]
  | [_, _]
  | [_]
  | []

export type AnyTup = Array<unknown> & { '0': unknown } | []

export type PrettifyIntersection<T> = Pick<T, keyof T>
